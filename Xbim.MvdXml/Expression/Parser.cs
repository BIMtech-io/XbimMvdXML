// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.0
// Machine:  C10200216
// DateTime: 11/05/2017 16:11:01
// UserName: sgmk2
// Input file <Parser.y - 11/05/2017 16:10:58>

// options: conflicts lines gplex conflicts listing

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Xbim.Gppg;
using System.Linq.Expressions;

namespace Xbim.MvdXml.Expression
{
internal enum Tokens {
    error=1,EOF=2,INTEGER=3,DOUBLE=4,ID=5,STRING=6,
    OP_EQ=7,OP_NEQ=8,OP_GT=9,OP_LT=10,OP_GTE=11,OP_LTQ=12,
    OP_LIKE=13,OP_AND=14,OP_OR=15,SQBR_LEFT=16,SQBR_RIGHT=17};

internal partial struct ValueType
#line 13 "Parser.y"
{
#line 14 "Parser.y"
		public string strVal;
#line 15 "Parser.y"
		public int intVal;
#line 16 "Parser.y"
		public double doubleVal;
#line 17 "Parser.y"
		public bool boolVal;
#line 18 "Parser.y"
		public Type typeVal;
#line 19 "Parser.y"
		public object val;
#line 20 "Parser.y"
		public Tokens token;
#line 21 "Parser.y"
	  }
// Abstract base class for GPLEX scanners
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

internal partial class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from Parser.y - 11/05/2017 16:10:58
#line 2 "Parser.y"
	
  // End verbatim content from Parser.y - 11/05/2017 16:10:58

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[17];
  private static State[] states = new State[22];
  private static string[] nonTerms = new string[] {
      "condition", "$accept", "leftTerm", "op_compare", "rightTerm", "metric", 
      };

  static Parser() {
    states[0] = new State(new int[]{5,17},new int[]{-1,1,-3,3});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{9,10,10,11,11,12,12,13,7,14,8,15,13,16},new int[]{-4,4});
    states[4] = new State(new int[]{5,6,4,7,3,8,6,9},new int[]{-5,5});
    states[5] = new State(-2);
    states[6] = new State(-6);
    states[7] = new State(-7);
    states[8] = new State(-8);
    states[9] = new State(-9);
    states[10] = new State(-10);
    states[11] = new State(-11);
    states[12] = new State(-12);
    states[13] = new State(-13);
    states[14] = new State(-14);
    states[15] = new State(-15);
    states[16] = new State(-16);
    states[17] = new State(new int[]{16,19,9,-3,10,-3,11,-3,12,-3,7,-3,8,-3,13,-3},new int[]{-6,18});
    states[18] = new State(-4);
    states[19] = new State(new int[]{5,20});
    states[20] = new State(new int[]{17,21});
    states[21] = new State(-5);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-3,-4,-5});
    rules[3] = new Rule(-3, new int[]{5});
    rules[4] = new Rule(-3, new int[]{5,-6});
    rules[5] = new Rule(-6, new int[]{16,5,17});
    rules[6] = new Rule(-5, new int[]{5});
    rules[7] = new Rule(-5, new int[]{4});
    rules[8] = new Rule(-5, new int[]{3});
    rules[9] = new Rule(-5, new int[]{6});
    rules[10] = new Rule(-4, new int[]{9});
    rules[11] = new Rule(-4, new int[]{10});
    rules[12] = new Rule(-4, new int[]{11});
    rules[13] = new Rule(-4, new int[]{12});
    rules[14] = new Rule(-4, new int[]{7});
    rules[15] = new Rule(-4, new int[]{8});
    rules[16] = new Rule(-4, new int[]{13});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // condition -> leftTerm, op_compare, rightTerm
#line 48 "Parser.y"
{SetCondition(ValueStack[ValueStack.Depth-3], ((Tokens)(ValueStack[ValueStack.Depth-2].val)), ValueStack[ValueStack.Depth-1]);}
        break;
      case 10: // op_compare -> OP_GT
#line 66 "Parser.y"
{CurrentSemanticValue.val = Tokens.OP_GT;}
        break;
      case 11: // op_compare -> OP_LT
#line 67 "Parser.y"
{CurrentSemanticValue.val = Tokens.OP_LT;}
        break;
      case 12: // op_compare -> OP_GTE
#line 68 "Parser.y"
{CurrentSemanticValue.val = Tokens.OP_GTE;}
        break;
      case 13: // op_compare -> OP_LTQ
#line 69 "Parser.y"
{CurrentSemanticValue.val = Tokens.OP_LTQ;}
        break;
      case 14: // op_compare -> OP_EQ
#line 70 "Parser.y"
{CurrentSemanticValue.val = Tokens.OP_EQ;}
        break;
      case 15: // op_compare -> OP_NEQ
#line 71 "Parser.y"
{CurrentSemanticValue.val = Tokens.OP_NEQ;}
        break;
      case 16: // op_compare -> OP_LIKE
#line 72 "Parser.y"
{CurrentSemanticValue.val = Tokens.OP_LIKE;}
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
